/**
 * Layout variants - implementation of layout for button content should be in this file 
 * though this and index.css both declare padding based on values from size.css
 * and index.css still holds control of width and height of the button (tied to size)
 *
 * 
 * 2 main cases for layout:
 * - centered (no icons)
 *   - we center the contents of the button and apply default padding
 * - with icon(s)
 *   - we place @iconLeft at the left if present, with some space between it and the content/yielded portion
 *     - we overwrite padding-left so it's slightly smaller and the icon appears to be at the edge
 *   - we allow the content/yielded portion to resize as necessary
 *   - we place @iconRight at the right if present, with some space between it and the content/yielded portion
 *     - we overwrite padding-right so it's slightly smaller and the icon appears to be at the edge
 *
 * padding-left and padding-right here are meant to override default padding provided in size-variants.css
 * 
 * Unlike the other files (kind-variants, size-variants), this file doesn't provide any css variables, rather it 
 * declares css properties directly because it's quite tricky to specify otherwise
 */

.boxel-button.boxel-button--layout-centered {
  display: inline-flex;
  justify-content: center;
  height: min-content;
  align-items: center;
}

.boxel-button.boxel-button--layout-icon {
  display: grid;
  height: min-content;
  gap: var(--boxel-button-icon-spacing);
  align-items: center;
  text-align: left;
}

.boxel-button--has-left-icon {
  grid-template-columns: auto 1fr;
  padding-left: var(--boxel-button-icon-spacing);
}

.boxel-button--has-right-icon {
  grid-template-columns: 1fr auto;
  padding-right: var(--boxel-button-icon-spacing);
}

.boxel-button--has-left-icon.boxel-button--has-right-icon {
  grid-template-columns: auto 1fr auto;
}
